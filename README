MungeServer README

The MungeServer is a "toy problem" http application server that serves
intentionally corrupted files according to a specification
not included by customer request. (and by a "bonus" mangle)

Start per usage below: (recommendation on 4 core system)
    ./munge_server.py -w 3

Name:
    munge_server.py

Usage:
    ./munge_server.py <opts>

Options:
    -p port    the port to open for incoming requests -- default 8675 
    -w workers the number of workers in the pool -- default 0 (no pool)
    -M         use the alternate munge

To exercise and test the MungeServer, use the PostPusher.  The details
of the POST request are not included (again by customer request).


Name:
   post_pusher.py 

Usage:
    ./post_pusher.py -a app_host <opts> file_list
    ./post_pusher.py -a app_host -u url_list

Options:
    -f file_server    the URL of the root of the file_list
    -h app_server     the URL file munging app server
    -w num_threads    the paralell width for post creation
    -u url_list       post one request with the csv url_list given
    -v validation_lvl control the level of testing for munge testing
    -M                use the alternate munge

When using -M, the parameter *must* match in the client and server
invocations for valdation operations to be valid

Description:
Accepts as an argument, the name of a file containing pathnames (or URLS),
one per line, that when prefixed by the file_server (if present and not "")
form the URL of a plain text file.  The file server is assumed to correctly
set the charset parameter.

These URL's are pseudorandomly grouped and sent (POST) to the app_server.
At validation_lvl > 0, the returned content is checked against the munge spec.
PASS and FAIL are reported once all POST responses have been processed.

The PostPusher is multithreaded, and can submit upto -w POST requests at a
time. If the PostPusher and MungeServer are running the same host,
consideration should be given to no oversubscribe the available thread.
in -v 1 mode, the processing load of the PostPusher is comparable per
URL, to the MungeServer, but much lighter (10%) with -v 0 set.

The supplied files below are lists of files in the linux kernel master file
https://github.com/torvalds/linux/archive/master.zip (as of Aug 28 09:29,
2017).  To use for testing purposes the master should be unpack in a web
server visible location, with the root of the linux tree given as the 
-f file_server arguement.

    short_list   -- first four files, suitable for smoke test
    medium_list  -- first 100 files
    quarter_list -- quarter of full list
    full_list    -- all files in master tree

Peformance and memory:
With -w 4 set for both client and server and -v 0 (trivial validation) set
in the PostPusher the quarter_list runs in ~3m on a 4 core Pentium N3750,
running Ubuntu 16.04LTS, with Apache2 acting as the fileserver.  This case
comprises 4,952 POST operations from PostPusher with 15,000 server side GET
operation from MungeServer. The majority of cycles for both server and client
appear to be correlate with the munging and munge validation operations.
Munge validation is much slower for "alternate munge" -M operations.

Both the MungeServer and PostPusher are  multitasked -- at URL granuality
(server) and request granularity (client).

Further testing should be done to determine if native (C/C++) processing
could effectively reduce the munge or munge validation times.

Per POST memory usage on the MungeServer is likely the most problematic,
performance element at this time for the "alternate munge".  Since the
http.server class used as the base class for the MungeServer (apparently)
doesn't support multipart respones (though this may be a developer
misapprehension), the entire munged response must be assembled before
responding.  In the case of large requests for large files to the
MungeServer, memory could come to be an issue. For the default munge,
memory requirements are limited to the unique set of character.


If the PostPusher and MungeServer are running the same host,
consideration should be given to no oversubscribe the available thread.
in -v 1 mode, the processing load of the PostPusher is comparable per
URL (for the alternate munge), for the MungeServer, but much lighter
(10%) with -v 0 set, or the default munge.  In fact, -v has no effect
for the default munge.

